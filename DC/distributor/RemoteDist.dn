uses data.adt.List

data Int {
	int i
}

const char debugMSG[] = "[@RemoteDist]"
const int DEFAULT_DIST_PORT = 8081
const int DEFAULT_APP_PORT  = 2010

component provides App requires io.Output out, net.TCPSocket, net.TCPServerSocket,
	data.StringUtil strUtil, composition.Assembly assembly, data.json.JSONEncoder encoder,
	data.IntUtil iu {

	IDCReference remote[] 	= null
	int portDist 			= 0
	int portApp				= 0
	bool running 			= false

	void startRemoteProcess(char remoteP[]) {
		// load and start relocated component
		if (!running) {
			AppParam params[] = new AppParam[1]
			params[0] = new AppParam()
			params[0].string = iu.intToString(portApp)
			assembly.setMain(remoteP, params)
			assembly.removeComp(new String[](
				new String("./../dc/hdr/getHD.o"),
				new String("./../dc/hd/getHDR.o"),
				new String("./../dc/mr/getMR.o"),
                new String("./../dc/mr/getMRR.o"),
                new String("./../dc/storedata/storeData.o")))
			out.println("$(debugMSG) Remote Component $(remoteP) Started! ")
			running = true
			remote = assembly.getCompsByProvidedInterface("proxy.DistProxy")
		}
		if ((remote == null) || (remote.arrayLength > 1)) { throw new Exception("Something went wrong!") }
		else {

			// parsing state to Data
			//Int content[] = encoder.jsonToArray(state, typeof(Int[]), null)
			// adding content to list in the object
			/*Object objects[] = remote[0].class.getObjects("data.adt.List:heap")
			List list = objects[0]
			for (int i = 0; i < content.arrayLength; i++) {
				list.add(content[i])
			}
			out.println("$(debugMSG) State inserted!")*/
    
		}
	}

	void handleRequest(TCPSocket client) {
		// reading data from socket -- this could be optimised
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = client.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					break
				}
			}
		}
        // processing command
		String helper[] = strUtil.explode(command, "!")
		if (helper[0].string == "../distributor/RemoteMR.o") {
			startRemoteProcess(helper[0].string)
        }else if (helper[0].string == "../distributor/RemoteMRR.o") {
			startRemoteProcess(helper[0].string)
		}else if (helper[0].string == "../distributor/RemoteHD.o") {
			startRemoteProcess(helper[0].string)
        }else if (helper[0].string == "../distributor/RemoteHDR.o") {
			startRemoteProcess(helper[0].string)
        }else if (helper[0].string == "../distributor/RemoteSData.o") {
			startRemoteProcess(helper[0].string)
        } else {
			//clearState()
		}
		client.send("OK")
		client.disconnect()
	}

	int App:main(AppParam params[]) {
		if (params.arrayLength == 2) {
			portDist = iu.intFromString(params[0].string)
			portApp = iu.intFromString(params[1].string)
		} else {
			portDist = DEFAULT_DIST_PORT
			portApp = DEFAULT_APP_PORT
		}

		TCPServerSocket host = new TCPServerSocket()

		if (!host.bind(TCPServerSocket.ANY_ADDRESS, portDist)) {
			out.println("Error: failed to bind master socket")
			return 1
		}

		out.println("$(debugMSG) Remote Distributor started!")
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host))
				asynch::handleRequest(client)
		}

		return 0
	}
}
