
const char debugMSG[] = "[@DataStreamRP]"
data Param {
	char value[]
}

data Request {
	char functionName[]
	int numParams
	Param params[]
}

data Response {
	// 1 OK - 2 FAILED
	byte status
	// if it's null or "" this has to be translated to null
	char value[]
}

data Associate {
	DocStream ds
	char id[]
}

/* Available list operations */
const char writeFNC[]   = "write"

component provides proxy.DocStreamRP requires io.Output out, data.IntUtil iu, net.TCPSocket,
	net.TCPServerSocket, data.json.JSONEncoder parser, data.StringUtil strUtil  {

	Associate associate[]
    static Mutex lock3 = new Mutex()
    int id = 0

	Response writeFunc(Request request) {
		Response response = null
		for (int i = 0; i < associate.arrayLength; i++) {
            if (associate[i].id == request.params[1].value) {
                response = new Response()
				associate[i].ds.write(request.params[0].value)
				response.status = 1
				response.value = ""
				break
			}
		}
		if (response == null) {
			out.println(" ########## $(debugMSG) No associate id found in response. ##################\n")
            out.println(" Request param value : [[$(request.params[1].value)]] - TESTE ")
            for (int i = 0; i < associate.arrayLength; i++) {
                out.println(" id  - [[$(associate[i].id)]] - TESTE2")
            }
		}
		return response
	}

	Response interpretRequest(Request request) {
		if (request.functionName == writeFNC) {
			return writeFunc(request)
		} else {
			Response response = new Response()
			response.status = 2
			response.value = ""
			return response
		}
	}

	Request parseRequest(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Request request = parser.jsonToData(helper[0].string, typeof(Request), null)
		Request newRequest = new Request()
		newRequest.numParams = request.numParams
		newRequest.functionName = request.functionName
		newRequest.params = new Param[newRequest.numParams]
		for (int i = 0; i < newRequest.numParams; i++) {
			newRequest.params[i] = new Param()
			newRequest.params[i].value = helper[i+1].string
		}
		return newRequest
	}

	Request readRequest(TCPSocket s) {
		Request request = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					request = parseRequest(strUtil.subString(command,
							0, command.arrayLength-4))
					break
				}
			}
		}
		if (request == null) { s.disconnect() }
		return request
	}

	void DocStreamRP:processDocStream(TCPSocket s) {
		Response response = new Response()
		Request request = readRequest(s)
		char content[]
		if (request == null) {
			response.status = 2
			response.value = null
		} else {
			response = interpretRequest(request)
		}
		if (response.status == 3) {
			response.status = 2
			char value[] = response.value
			response.value = ""
			content = new char[](parser.jsonFromData(response,null), "!", value, "\r\r\r\r")
		} else {
			content = new char[](parser.jsonFromData(response,null), "\r\r\r\r")
		}
		s.send(content)
		s.disconnect()
	}

	// update this to use a HashTable
	char[] DocStreamRP:associate(DocStream s) {
        mutex(lock3){
            char idGen[]
            id++
            idGen = iu.makeString(id)
            associate = new Associate[](associate, new Associate(s, idGen))
            return idGen
        }
	}
}
