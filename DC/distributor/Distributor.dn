const char debugMSG[]	  = "[@Distributor]"

const char HELP[]       = "help"
const char CREATE[]     = "create"
const char LOCAL[]      = "local"
const char PERCEPTION[] = "perception"
const char TEST[]		= "test"
const char MR[]			= "mr"
const char MRR[]		= "mrr"
const char HD[]			= "hd"
const char HDR[]		= "hdr"
const char EXIT[]       = "exit"


component provides App requires io.Output out, data.StringUtil strUtil, data.IntUtil iu, io.Input in,io.TextFile,
	monitoring.Perception, data.json.JSONEncoder encoder,data.json.JSONParser parser,
     data.DecUtil du, time.Timer t,serverctl.Serverctl SCTL{

	String remoteConfigs[] 		= null
	String localConfigs[] 		= null
	String distributedProxies[] = null
	Perception perception 		= null
    String configsStr[] = null

	void help() {
		out.println("Command list:")
		out.println(" $(HELP) - to list all commands")
        out.println(" $(MR) - to distribute getMR")
		out.println(" $(MRR) - to distribute getMRR")
		out.println(" $(HD) - to distribute getHD")
		out.println(" $(HDR) - to distribute getHDR")
        out.println(" $(PERCEPTION) - to get Perception Data")
		out.println(" $(LOCAL) - to bring list locally")
        out.println(" $(TEST) - to start cycles of testing")
		out.println(" $(EXIT) - to finish execution")
	}

	void local() {
		perception.setConfig(localConfigs[0].string)
		out.println("$(debugMSG) Local composition running.")
	}

	void distribute(char proxyInterface[]) {
    char remoteConfig[] = getRemoteConfig("$(proxyInterface)")
		if (remoteConfig != null) {
			perception.setConfig(remoteConfig)
			out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")
		} else {
			throw new Exception("Something went wrong! Couldn't find remote proxy.")
		}
	}

	void perception() {
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		for (int i = 0; i < pD.arrayLength; i++) {
			for (int cMetrics = 0; cMetrics < pD[i].metrics.arrayLength; cMetrics++) {
				dec value = pD[i].metrics[cMetrics].value
				dec counter = pD[i].metrics[cMetrics].counter
				dec avgRT = value/counter
				out.println("$(debugMSG) Avg response time: $(du.decToString(avgRT))")
			}
			for (int cEvents = 0; cEvents < pD[i].events.arrayLength; cEvents++) {
				out.println("$(debugMSG) Request type: $(pD[i].events[cEvents].type) - $(pD[i].events[cEvents].counter) ")
			}
		}
	}

	dec getAvgResponseTime() {
		PerceptionData pD[] = encoder.jsonToArray(perception.getPerceptionData(), typeof(PerceptionData[]), null)
		dec result = 0.0
		if ((pD != null) && (pD[0].metrics.arrayLength > 0)) {
			dec value = pD[0].metrics[0].value
			dec counter = pD[0].metrics[0].value
			result = value/counter
		}
		return result
	}

	void observationLoop(int numCycles, int observationWindow) {
		getAvgResponseTime()
		for (int i = 0; i < numCycles; i++) {
			t.sleep(observationWindow)
			out.println("$(debugMSG) $(du.decToString(getAvgResponseTime()))")
		}
	}

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		char quantity[]
		char j[]
        int qt 

        if (cmdList.arrayLength == 1) {
					if (cmd == HELP) {
						help()
					} else if (cmd == LOCAL) {
						local()
					} else if (cmd == MR) {
                        out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("mr",qt)

                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") != StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
                                    
							}
						}
						
                        out.println("Connecting to Pods on config $(j)")
                        perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        // TODO: Debug this
                        // Even when pods are already running, need some extra time to avoid connection error.
                        t.sleep(10000)
                        out.println("$(debugMSG) Remote composition [(mr/getMRProxy.o)] running.")
                        //distribute("mr/getMRProxy.o")

					} else if (cmd == MRR){
                        out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("mrr",qt)
                        
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						out.println("Connecting to Pods on config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        t.sleep(10000)
                        out.println("$(debugMSG) Remote composition [(mrr/getMRRProxy.o)] running.")
                        //distribute("mrr/getMRRProxy.o")
					} else if (cmd == HD){

						out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("hd",qt)
                        
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") != StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") == StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						out.println("Connecting to Pods on config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        t.sleep(10000)
                        out.println("$(debugMSG) Remote composition [(hd/getHDProxy.o)] running.")
                        //distribute("hd/getHDProxy.o")
					} else if (cmd == HDR){
						out.println("Amount of pods: ")
                        quantity = in.readln()
                        qt = iu.intFromString(quantity)
                        SCTL.create_pods("hdr",qt)
                        // Removed Sleep as ServerCTL deployment always check for status while creating pods.
                        for ( int i = 0 ; i < remoteConfigs.arrayLength; i++){
							if ((strUtil.ifind(remoteConfigs[i].string,"mr/getMRProxy.o") == StringUtil.NOT_FOUND ) &&
                                (strUtil.ifind(remoteConfigs[i].string,"mrr/getMRRProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hd/getHDProxy.o") == StringUtil.NOT_FOUND) &&
                                (strUtil.ifind(remoteConfigs[i].string,"hdr/getHDRProxy.o") != StringUtil.NOT_FOUND)){
									out.println("$(i) - $(remoteConfigs[i].string)")
									out.println(" ")
                                    j = iu.makeString(i)
							}
						}
						
						out.println("Connecting to Pods with config $(j)")
						perception.setConfig(remoteConfigs[iu.intFromString(j)].string)
                        t.sleep(10000)
                        out.println("$(debugMSG) Remote composition [(hdr/getHDRProxy.o)] running.")
                        //distribute("hdr/getHDRProxy.o")
                    }else if(cmd == PERCEPTION){
                        out.println("PERCEPTION DATA : ")
                        out.println("$(perception.getPerceptionData())")
                    } else if (cmd == TEST) {
                        int observationWindow = 0
                        int numberOfCycles = 0
                        char resultFileName[] = null
                        char allConfigsOp[] = null
                        out.println("$(debugMSG) Test setup!\n$(debugMSG) Please provide the number of test cycles:")
                        out.print(" test> ")
                        numberOfCycles = iu.intFromString(in.readln())
                        out.println("$(debugMSG) Observation window size (ms):")
                        out.print(" test> ")
                        observationWindow = iu.intFromString(in.readln())
                        out.println("$(debugMSG) Name of output file:")
                        out.print(" test> ")
                        resultFileName = in.readln()
                        out.println("$(debugMSG) All configs? [y/n]")
                        out.print(" test> ")
                        allConfigsOp = in.readln()
                        if (allConfigsOp == "y") { configsStr = perception.getAllConfigs() }
                        else {
                             out.println("$(perception.getConfig())")
                             configsStr = new String[](new String(perception.getConfig()))
                             
                             }
                        out.print("$(debugMSG) All setup. Press [ENTER] to start test")
                        in.readln()
                        out.println("$(debugMSG) Starting test...")
                        TextFile outF = new TextFile(resultFileName, File.WRITE)
                        for (int confCount = 0; confCount < configsStr.arrayLength; confCount++) {
                            perception.setConfig(configsStr[confCount].string)
                            out.println("$(debugMSG) Config: $(getVariant(configsStr[confCount].string))")
                            outF.writeLine(new char[]("config, ", getVariant(configsStr[confCount].string)))
                            perception.getPerceptionData()
                            for (int i = 0; i < numberOfCycles; i++) {
                                t.sleep(observationWindow)
                                handlePerception(perception.getPerceptionData(), outF)
                            }
                            if (configsStr.arrayLength > 1) { outF.writeLine("\n\n") }
                        }
                        outF.close()
                        out.println("$(debugMSG) Test finished.")
                    } else {
						out.println("Invalid command.")
					}
				}
	}

	char[] getRemoteConfig(char proxy[]) {
		for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
			if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
				return remoteConfigs[pointer].string
			}
		}
		return null
	}
    void handlePerception(char perceptionData[], TextFile file) {
		if (perceptionData == "{}") {
			out.println("$(debugMSG) No perception data.")
			return
		}
		char result[] = ""
		dec value = 0
		int count = 0
		PerceptionData pD[] = encoder.jsonToArray(perceptionData, typeof(PerceptionData[]), null)
		if (((pD != null) && (pD.arrayLength > 0)) && (pD[0].metrics.arrayLength > 0)) {
			value = pD[0].metrics[0].value
			count = pD[0].metrics[0].counter
			dec metricValue = value/count
			result = new char[](result, pD[0].metrics[0].name, ": ", du.decToString(metricValue), " ms")
			out.println("$(debugMSG) $(result)")
            if (file != null) { file.writeLine("$(debugMSG) $(result)") }
		} else {
			out.println("$(debugMSG) No perception data.")
		}
	}

    char[] getVariant(char config[]) {
		String helper[] = strUtil.explode(config, "|")
		helper = strUtil.explode(helper[0].string, ",")
		for (int i = 0; i < helper.arrayLength; i++) {
			if (strUtil.find(helper[i].string, "../dc/ws/NFRP") != StringUtil.NOT_FOUND) {
				return helper[i].string
			}
		}
		return config
	}

	// Guess there's a better way of doing this...
	void remoteLocalSeparation() {
		if ((remoteConfigs == null) || (localConfigs == null)) {
			out.println("$(debugMSG) Separating local and remote compositions...")
			String configs[] = perception.getAllConfigs()
			for (int confPointer = 0; confPointer < configs.arrayLength; confPointer++) {
				bool remote = false
				for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
					if (strUtil.find(configs[confPointer].string, distributedProxies[distProxy].string)
							!= StringUtil.NOT_FOUND) {
						remoteConfigs = new String[](remoteConfigs, configs[confPointer])
						remote = true
						break
					}
				}
				if (!remote) {
					localConfigs = new String[](localConfigs, configs[confPointer])
				}
			}
		}
	}

	// TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
	// currently hard-coded
	void loadDistributedProxies() {
		if (distributedProxies == null) {
			distributedProxies = new String[](
				new String("getMRProxy.o"),
				new String("getMRRProxy.o"),
				new String("getHDProxy.o"),
				new String("getHDRProxy.o"))
		}
	}

	int App:main(AppParam params[]) {
		perception = new Perception(true)
		/* Loading target system and adding a monitoring proxy to it */
		perception.setMain("../repository/TCPNetwork.o", null)
        out.println("$(debugMSG) Adding Monitoring Proxy...")
        perception.addProxy("|../distributor/monitoring/proxies/DCProxy.o|*(*:hh.HTTPHandler[0]:*)|")
        out.println("$(debugMSG) Proxy added!")
        String configs[] = perception.getAllConfigs()
		/*for (int i = 0; i < configs.arrayLength; i++) {
			out.println("$(debugMSG) $(iu.intToString(i+1)): $(configs[i].string)")
		}*/
		loadDistributedProxies()
		remoteLocalSeparation()
		local()
		/* command prompt */
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") {
				commandInterpret(cmd)
			}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}
